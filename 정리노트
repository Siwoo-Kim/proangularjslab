
AngularJS?
    - Backend 개발 분야의 모범 기법을 토대로 HTML 을 확장하고 리치 앱을 개발할 수 있는 토대를 마련.
    MVC(Model-View-Controller) 라는 디자인 패턴을 중심으로 개발.
    MVC 패턴의 특징 네가지?
        - 확장, 유지보수, 테스트, 표준화.
    개발 환경 설정?
        - 앵귤러 개발을 위해서는 웹 브라우저를 기본으로 node.js, 앵귤러 라이브러리, karma, bootstrap[옵션] 등이 필요하다.
        node.js?
            -   자바스크립트를 브라우저 밖에서 실행할 수 있는 환경을 제공한다.
        앵귤러 라이브러리 다운로드?
            - http://angularjs.org 에서 라이브러리를 다운 받을 수 있다.
            위의 링크에선 앵귤러 라이브러리의 기능을 확장해주는 추가 파일도 제공한다.
        테스트 시스템?
            - 앵귤러 단위 테스트를 위해 Karma 테스트 러너와 Jasmine 테스트 프레임워크가 필요하다
            npm install -g karma 로 설치할 수 있다.
        부트스트랩 다운로드?
            - 부트스트랩을 통해 다양한 CSS 스타일을 활용할 수 있다.
            http://getbootstrap.com 에서 Bootstrap 을 다운받을 수 있다.

기본 개념?
    - AngularJS 의 가장 핵심이 되는 개념은 MVC(Model - View - Controller) 이며,
    가장 기본적인 컴포넌트는 모듈, 컨트롤러, 디렉티브이다.
   정적 HTML?
        - 정적 html 은 AngularJS 기능을 사용하기 위하여
        각 라이브러리에 대한 script 엘리먼트를 추가해야 한다.

   모듈(module)?
        - AngularJS 앱은 하나 이상의 모듈로 구성된다.
        모듈 생성?
            - angular.module("모듈이름", [추가 의존 모듈]) 메서드를 이용해 생성한다.
            ng-app?
            - ng-app 속성은 앵귤러에게 컴파일(Compile) 하고 처리해야 할 모듈이 있음을 알린다.
            ng-app 을 만나면 AngularJS 는 HTML 기능을 확장한다.

   데이터 모델(Model)?
        - 앵귤러의 데이터 모델은 MVC 패턴의 데이터를 역할을 한다.
        데이터는 $scope 의 속성이며 데이터의 처리하는 로직은 Controller 로 분리해져 있다.

        *앵귤러 앱의 세가지 영역?
            - 데이터 (Model), 데이터 처리 로직(Controller), 데이터 표현(HTML & Directive)
   컨트롤러(Controller)?
        - 컨트롤러는 데이터 모델($scope)을 핸들링하고, 뷰를 지원하는 데 필요한 로직을 정의한다. 이를 비즈니스 로직이라 한다.
        또한 데이터 모델($scope) 을 뷰에 제공한다.
        컨트롤러 생성?
            - Module.controller("컨트롤러이름", factoryFunction()) 메서드를 이용하여 정의, 생성한다.
        컨트롤러의 이름?
            - 관레상 컨트롤러의 이름은 <이름>ctrl 이다.
        컨트롤러의 $scope?
            - 컨트롤러가 제공하고 뷰가 접근할 수 있는 데이터 영역(데이터 및 기능)을 스코프라 한다.
        ng-controller 어트리뷰트?
            - 컨트롤러가 책임질 HTML 문서 영역(TEMPLATE) 을 지정한다.
        컨트롤러의 동작?
            - 동작이란 scope 의 정의된 메서드이며 비즈니스 로직을 구현하기 위해 모델 내 데이터에 대해 수행되는 기능을 뜻한다.
            동작의 동작 의존?
                - 이미 구현된 동작을 구현하면 코드의 중복성을 줄일 수 있다.

   뷰(View)?
        - 정적 HTML 과 컨트롤러가 제공하는 데이터(SCOPE) 를 결합한 것을 뷰라고 정의한다.
        뷰 생성?
            - 컨트롤러가 제공한 데이터와 HTML 과 디렉티브를 이용하여 생성.
        데이터 바인딩?
            - 모델 데이터(SCOPE) 을 HTML 문서에 채우는 것을 의미한다.
            삽입식( {{ }} )?
                - HTML 문서에서 {{ }} 의 표현식은 자바스크립트로써 해석되며, 컨트롤러의 스코프에 지정된 데이터 및 함수로 제한된다.
                삽입식과 $scope 객체?
                    - 삽입식의 접근하는 데이터와 함수는 영역이 지정된 컨트롤러의 $scope 객체의 영역으로 제한된다.
        디렉티브?
            - 디렉티브는 View 영역에 속하며, HTML 을 확장한다.
            디렉티브의 종류에는 내장 디렉티브와 정의한 디렉티브로 나뉜다.
            내장 디렉티브?
                - AngularJS 에서 제공하는 디렉티브.
                ng-repeat 디렉티브?
                    - 해당 엘리먼트를 배열 내 객체별로 생성한다. <name> in <Collection> 형태로 사용한다.
                ng-model 디렉티브?
                    - 입력 Element(ex> input) 와 데이터 모델을 양방향 바인딩을 적용한다.
                    *동작 으로도 양방향 바인딩 구현이 가능하다. &)기본 개념 - 컨트롤러 - 컨트롤러 참조
                    양방향 바인딩?
                        - 데이터 모델이 HTML Element 을 생성하는 동시에, 엘리먼트 내 변화가 생기면 모델 또한 업데이트 된다.
                ng-hide 디렉티브?
                    - ng-hide 디렉티브의 지정된 표현식이 true 라면 해당 Element 은 가시성을 잃는다.
                ng-class 디렉티브?
                    - 지정된 표현식의 결과를 해당 Element 의 css 클래스로 추가한다.

        사용자와 상호작용?
            - 이벤트 디렉티브와 컨트롤러의 동작을 이용해 사용자의 이벤트(Event) 를 처리할 수 있다.
            이벤트 디렉티브?
                - 이벤트 디렉티브가 지정된 엘리먼트에서 이벤트가 일어날 때 표현식에 지정된 핸들러를 호출한다.
                ng-click
                    - click 이벤트가 일어날 때 표현식에 지정된 핸들러를 호출한다.

        필터링 및 정렬(모델 데이터)
            - 모델 데이터의 필터링 및 정렬을 수행한다. 뷰 영역 뿐만 아니라 앱 전역에서 재사용할 수 있다.
            필터의 호출은 | 파이프와 필터명을 이용하여 호출한다.
            ex) items | filter: {property: value}| orderBy: 'propertyName'
            내장 필터?
                - 앵귤러에서 지원하는 필터를 의미한다.
            커스텀 필터?
                - Model.filter('필터이름', factoryFunction()) 로 생성한다.
                    팩토리 함수(factoryFunction)?
                        factoryFunction() 팩토리 함수는 작업자 함수를 리턴한다.
                            작업자 함수?
                                - 팩토리 함수에서 생성되며, 첫번째 인자로 필터링할 배열을 받는다.
                                두번째 인자 이상부터는 뷰에서 콜론(:) 뒤로 전달된 인자를 받는다.
                                workerFunction(array[], ...varags)?

                필터로의 인자 전달?
                   item | checkedItems: showComplete
